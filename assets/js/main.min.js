"use strict";
"use strict";

var gMap = null;

document.addEventListener("DOMContentLoaded", function (event) {
	loadMap();
});

/*
form in iframe is going to throw event when it's done
*/
document.addEventListener("formDone", function (evt) {

	//remove popups
	var popups = document.querySelectorAll(".mapboxgl-popup");
	for (var i = 0; i < popups.length; i++) {
		popups[i].parentNode.removeChild(popups[i]);
	}

	//reload markers
	loadMapContent();
});

//initialize map and handlers
function loadMap() {
	mapboxgl.accessToken = 'pk.eyJ1IjoibWFydGlud2FhZyIsImEiOiJjaWo0NWt6ZWYwMDE0dXlrcm0yenVkNDR5In0.0I9xJzLubP9g3V_NTt1PhA';
	gMap = new mapboxgl.Map({
		container: 'map', // container id
		style: 'mapbox://styles/martinwaag/cirx7ujxw003cgymgmwofw995', //stylesheet location
		center: [4.820902482840296, 52.3749057570665], // starting position
		zoom: 12 // starting zoom
	});

	//get markers form webservice and put in layer on map
	gMap.on('load', function () {
		loadMapContent();
	});

	//add popup in iframe with image upload form
	gMap.on('click', function (e) {

		//
		var features = gMap.queryRenderedFeatures(e.point, { layers: ['meeting'] });
		if (features.length == 0) {
			//
			var popup = new mapboxgl.Popup().setLngLat(e.lngLat);
			var iframe = document.createElement("iframe");
			iframe.src = "form.html?lat=" + e.lngLat.lat + "&lng=" + e.lngLat.lng;
			popup.setDOMContent(iframe);
			popup.addTo(gMap);
		} else {
			for (var i = 0; i < features.length; i++) {
				//get the resource_id of the clicked feature and load resource              
				loadResourceOnMap(features[i].properties.resource_id);
			}
		}
	});
}

//update map content
function loadMapContent() {

	if (gMap != null) {
		var source = "/api/markers";
		window.fetch(source).then(function (response) {
			if (response.status >= 200 && response.status < 300) {
				return response.json(); //we don't process it any further
			} else {
				throw response.statusText;
			}
		}).then(function (json) {
			//remove existing source if there is one
			if (gMap.getSource('meeting') != null) {
				gMap.removeSource('meeting');
			}
			//add markers and layer
			gMap.addSource('meeting', {
				type: 'geojson',
				data: json
			});
			gMap.addLayer({
				"id": "meeting",
				"type": "symbol",
				"source": "meeting",
				"layout": {
					"icon-image": "{icon}-15",
					"icon-allow-overlap": true
				}
			});
		}).catch(function (ex) {
			alert(ex);
		});
	}
}

function loadResourceOnMap(id) {

	if (gMap != null) {
		var source = "/api/resource/" + id;
		window.fetch(source).then(function (response) {
			if (response.status >= 200 && response.status < 300) {
				return response.json(); //we don't process it any further
			} else {
				throw response.statusText;
			}
		}).then(function (json) {

			//use someting for this ?? jsx 
			var div = document.createElement("div");
			var img = document.createElement("img");
			img.src = json.thumb_url;
			var text = document.createTextNode(json.description);
			div.appendChild(text);
			div.appendChild(img);

			//add popup
			var popup = new mapboxgl.Popup().setLngLat([json.lon, json.lat]);
			popup.setDOMContent(div);
			popup.addTo(gMap);
		}).catch(function (ex) {
			alert(ex);
		});
	}
}
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

!function n(t, e, r) {
  function o(u, f) {
    if (!e[u]) {
      if (!t[u]) {
        var c = "function" == typeof require && require;if (!f && c) return c(u, !0);if (i) return i(u, !0);var s = new Error("Cannot find module '" + u + "'");throw s.code = "MODULE_NOT_FOUND", s;
      }var l = e[u] = { exports: {} };t[u][0].call(l.exports, function (n) {
        var e = t[u][1][n];return o(e ? e : n);
      }, l, l.exports, n, t, e, r);
    }return e[u].exports;
  }for (var i = "function" == typeof require && require, u = 0; u < r.length; u++) {
    o(r[u]);
  }return o;
}({ 1: [function (n, t, e) {
    "use strict";
    function r() {}function o(n) {
      try {
        return n.then;
      } catch (t) {
        return d = t, w;
      }
    }function i(n, t) {
      try {
        return n(t);
      } catch (e) {
        return d = e, w;
      }
    }function u(n, t, e) {
      try {
        n(t, e);
      } catch (r) {
        return d = r, w;
      }
    }function f(n) {
      if ("object" != _typeof(this)) throw new TypeError("Promises must be constructed via new");if ("function" != typeof n) throw new TypeError("not a function");this._37 = 0, this._12 = null, this._59 = [], n !== r && v(n, this);
    }function c(n, t, e) {
      return new n.constructor(function (o, i) {
        var u = new f(r);u.then(o, i), s(n, new p(t, e, u));
      });
    }function s(n, t) {
      for (; 3 === n._37;) {
        n = n._12;
      }return 0 === n._37 ? void n._59.push(t) : void y(function () {
        var e = 1 === n._37 ? t.onFulfilled : t.onRejected;if (null === e) return void (1 === n._37 ? l(t.promise, n._12) : a(t.promise, n._12));var r = i(e, n._12);r === w ? a(t.promise, d) : l(t.promise, r);
      });
    }function l(n, t) {
      if (t === n) return a(n, new TypeError("A promise cannot be resolved with itself."));if (t && ("object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) || "function" == typeof t)) {
        var e = o(t);if (e === w) return a(n, d);if (e === n.then && t instanceof f) return n._37 = 3, n._12 = t, void h(n);if ("function" == typeof e) return void v(e.bind(t), n);
      }n._37 = 1, n._12 = t, h(n);
    }function a(n, t) {
      n._37 = 2, n._12 = t, h(n);
    }function h(n) {
      for (var t = 0; t < n._59.length; t++) {
        s(n, n._59[t]);
      }n._59 = null;
    }function p(n, t, e) {
      this.onFulfilled = "function" == typeof n ? n : null, this.onRejected = "function" == typeof t ? t : null, this.promise = e;
    }function v(n, t) {
      var e = !1,
          r = u(n, function (n) {
        e || (e = !0, l(t, n));
      }, function (n) {
        e || (e = !0, a(t, n));
      });e || r !== w || (e = !0, a(t, d));
    }var y = n("asap/raw"),
        d = null,
        w = {};t.exports = f, f._99 = r, f.prototype.then = function (n, t) {
      if (this.constructor !== f) return c(this, n, t);var e = new f(r);return s(this, new p(n, t, e)), e;
    };
  }, { "asap/raw": 4 }], 2: [function (n, t, e) {
    "use strict";
    function r(n) {
      var t = new o(o._99);return t._37 = 1, t._12 = n, t;
    }var o = n("./core.js");t.exports = o;var i = r(!0),
        u = r(!1),
        f = r(null),
        c = r(void 0),
        s = r(0),
        l = r("");o.resolve = function (n) {
      if (n instanceof o) return n;if (null === n) return f;if (void 0 === n) return c;if (n === !0) return i;if (n === !1) return u;if (0 === n) return s;if ("" === n) return l;if ("object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) || "function" == typeof n) try {
        var t = n.then;if ("function" == typeof t) return new o(t.bind(n));
      } catch (e) {
        return new o(function (n, t) {
          t(e);
        });
      }return r(n);
    }, o.all = function (n) {
      var t = Array.prototype.slice.call(n);return new o(function (n, e) {
        function r(u, f) {
          if (f && ("object" == (typeof f === "undefined" ? "undefined" : _typeof(f)) || "function" == typeof f)) {
            if (f instanceof o && f.then === o.prototype.then) {
              for (; 3 === f._37;) {
                f = f._12;
              }return 1 === f._37 ? r(u, f._12) : (2 === f._37 && e(f._12), void f.then(function (n) {
                r(u, n);
              }, e));
            }var c = f.then;if ("function" == typeof c) {
              var s = new o(c.bind(f));return void s.then(function (n) {
                r(u, n);
              }, e);
            }
          }t[u] = f, 0 === --i && n(t);
        }if (0 === t.length) return n([]);for (var i = t.length, u = 0; u < t.length; u++) {
          r(u, t[u]);
        }
      });
    }, o.reject = function (n) {
      return new o(function (t, e) {
        e(n);
      });
    }, o.race = function (n) {
      return new o(function (t, e) {
        n.forEach(function (n) {
          o.resolve(n).then(t, e);
        });
      });
    }, o.prototype["catch"] = function (n) {
      return this.then(null, n);
    };
  }, { "./core.js": 1 }], 3: [function (n, t, e) {
    "use strict";
    function r() {
      if (c.length) throw c.shift();
    }function o(n) {
      var t;t = f.length ? f.pop() : new i(), t.task = n, u(t);
    }function i() {
      this.task = null;
    }var u = n("./raw"),
        f = [],
        c = [],
        s = u.makeRequestCallFromTimer(r);t.exports = o, i.prototype.call = function () {
      try {
        this.task.call();
      } catch (n) {
        o.onerror ? o.onerror(n) : (c.push(n), s());
      } finally {
        this.task = null, f[f.length] = this;
      }
    };
  }, { "./raw": 4 }], 4: [function (n, t, e) {
    (function (n) {
      "use strict";
      function e(n) {
        f.length || (u(), c = !0), f[f.length] = n;
      }function r() {
        for (; s < f.length;) {
          var n = s;if (s += 1, f[n].call(), s > l) {
            for (var t = 0, e = f.length - s; e > t; t++) {
              f[t] = f[t + s];
            }f.length -= s, s = 0;
          }
        }f.length = 0, s = 0, c = !1;
      }function o(n) {
        var t = 1,
            e = new a(n),
            r = document.createTextNode("");return e.observe(r, { characterData: !0 }), function () {
          t = -t, r.data = t;
        };
      }function i(n) {
        return function () {
          function t() {
            clearTimeout(e), clearInterval(r), n();
          }var e = setTimeout(t, 0),
              r = setInterval(t, 50);
        };
      }t.exports = e;var u,
          f = [],
          c = !1,
          s = 0,
          l = 1024,
          a = n.MutationObserver || n.WebKitMutationObserver;u = "function" == typeof a ? o(r) : i(r), e.requestFlush = u, e.makeRequestCallFromTimer = i;
    }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
  }, {}], 5: [function (n, t, e) {
    "function" != typeof Promise.prototype.done && (Promise.prototype.done = function (n, t) {
      var e = arguments.length ? this.then.apply(this, arguments) : this;e.then(null, function (n) {
        setTimeout(function () {
          throw n;
        }, 0);
      });
    });
  }, {}], 6: [function (n, t, e) {
    n("asap");"undefined" == typeof Promise && (Promise = n("./lib/core.js"), n("./lib/es6-extensions.js")), n("./polyfill-done.js");
  }, { "./lib/core.js": 1, "./lib/es6-extensions.js": 2, "./polyfill-done.js": 5, asap: 3 }] }, {}, [6]);
//# sourceMappingURL=/polyfills/promise-7.0.4.min.js.map
'use strict';

(function (self) {
  'use strict';

  if (self.fetch) {
    return;
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && function () {
      try {
        new Blob();
        return true;
      } catch (e) {
        return false;
      }
    }(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name');
    }
    return name.toLowerCase();
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value;
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function next() {
        var value = items.shift();
        return { done: value === undefined, value: value };
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function () {
        return iterator;
      };
    }

    return iterator;
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function (value, name) {
        this.append(name, value);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function (name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var list = this.map[name];
    if (!list) {
      list = [];
      this.map[name] = list;
    }
    list.push(value);
  };

  Headers.prototype['delete'] = function (name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name) {
    var values = this.map[normalizeName(name)];
    return values ? values[0] : null;
  };

  Headers.prototype.getAll = function (name) {
    return this.map[normalizeName(name)] || [];
  };

  Headers.prototype.has = function (name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };

  Headers.prototype.set = function (name, value) {
    this.map[normalizeName(name)] = [normalizeValue(value)];
  };

  Headers.prototype.forEach = function (callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function (name) {
      this.map[name].forEach(function (value) {
        callback.call(thisArg, value, name, this);
      }, this);
    }, this);
  };

  Headers.prototype.keys = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push(name);
    });
    return iteratorFor(items);
  };

  Headers.prototype.values = function () {
    var items = [];
    this.forEach(function (value) {
      items.push(value);
    });
    return iteratorFor(items);
  };

  Headers.prototype.entries = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items);
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'));
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
      reader.onload = function () {
        resolve(reader.result);
      };
      reader.onerror = function () {
        reject(reader.error);
      };
    });
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    reader.readAsArrayBuffer(blob);
    return fileReaderReady(reader);
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    reader.readAsText(blob);
    return fileReaderReady(reader);
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function (body) {
      this._bodyInit = body;
      if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (!body) {
        this._bodyText = '';
      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {
        // Only support ArrayBuffers for POST method.
        // Receiving ArrayBuffers happens via Blobs, instead.
      } else {
        throw new Error('unsupported BodyInit type');
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function () {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob');
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      this.arrayBuffer = function () {
        return this.blob().then(readBlobAsArrayBuffer);
      };

      this.text = function () {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };
    } else {
      this.text = function () {
        var rejected = consumed(this);
        return rejected ? rejected : Promise.resolve(this._bodyText);
      };
    }

    if (support.formData) {
      this.formData = function () {
        return this.text().then(decode);
      };
    }

    this.json = function () {
      return this.text().then(JSON.parse);
    };

    return this;
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;
    if (Request.prototype.isPrototypeOf(input)) {
      if (input.bodyUsed) {
        throw new TypeError('Already read');
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      if (!body) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = input;
    }

    this.credentials = options.credentials || this.credentials || 'omit';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests');
    }
    this._initBody(body);
  }

  Request.prototype.clone = function () {
    return new Request(this);
  };

  function decode(body) {
    var form = new FormData();
    body.trim().split('&').forEach(function (bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form;
  }

  function headers(xhr) {
    var head = new Headers();
    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\n');
    pairs.forEach(function (header) {
      var split = header.trim().split(':');
      var key = split.shift().trim();
      var value = split.join(':').trim();
      head.append(key, value);
    });
    return head;
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText;
    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function () {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    });
  };

  Response.error = function () {
    var response = new Response(null, { status: 0, statusText: '' });
    response.type = 'error';
    return response;
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function (url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code');
    }

    return new Response(null, { status: status, headers: { location: url } });
  };

  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;

  self.fetch = function (input, init) {
    return new Promise(function (resolve, reject) {
      var request;
      if (Request.prototype.isPrototypeOf(input) && !init) {
        request = input;
      } else {
        request = new Request(input, init);
      }

      var xhr = new XMLHttpRequest();

      function responseURL() {
        if ('responseURL' in xhr) {
          return xhr.responseURL;
        }

        // Avoid security warnings on getResponseHeader when not allowed by CORS
        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
          return xhr.getResponseHeader('X-Request-URL');
        }

        return;
      }

      xhr.onload = function () {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: headers(xhr),
          url: responseURL()
        };
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function (value, name) {
        xhr.setRequestHeader(name, value);
      });

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    });
  };
  self.fetch.polyfill = true;
})(typeof self !== 'undefined' ? self : undefined);